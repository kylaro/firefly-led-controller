import pcbnew
from pcbnew import *
import math


def mm_to_nm(v):
    return int(v * 1000000)

def in_to_nm(v):
	return int(v * 1000000 * 25.4)

def find_pad(module, padName):
    for pad in module.Pads():
        if pad.GetPadName() == padName:
        	return pad
    return None

def sort_by_distance(xs,ys):
	sorted_xs = []
	sorted_ys = []
	start_length = len(xs)
	for i in range(start_length):
		closest_x = 0
		closest_y = 0
		closest_idx = 10000
		min_dist = 1000000
		for j in range(len(xs)):
			dist = math.sqrt(xs[j]**2+ys[j]**2)
			if(dist<min_dist):
				closest_x = xs[j]
				closest_y = ys[j]
				closest_idx = j
				min_dist = dist
		sorted_xs.append(closest_x)
		sorted_ys.append(closest_y)
	return sorted_xs, sorted_ys

def SpiralIndexer(x,y):
    pp=[]
    for i in range(0, len(x)):
        pp.append([x[i]/100,y[i]/100])
    # compute centroid
    cent=(sum([p[0] for p in pp])/len(pp),sum([p[1] for p in pp])/len(pp))
    # sort by polar angle
    pp.sort(key=lambda p: p[1])
    return pp

def BandSort(x,y):
	pp=[]
	sorted_pp = []
	for i in range(0, len(x)):
		pp.append([x[i]/100,y[i]/100])
	top = min(y)/100
	print(top)
	bandwidth = 0.6
	done = False
	sign = 1
	count = 1
	while(not done):
		curr_band_list = []
		for p in pp:
			if(top+bandwidth*(count-1) <= p[1] < top+bandwidth*count):
				curr_band_list.append(p)
		if(len(curr_band_list) == 0):
			break
		curr_band_list.sort(key=lambda p: sign*p[0])
		for i in range(len(curr_band_list)):
			sorted_pp.append(curr_band_list[i])
		sign = sign * -1
		count += 1
	return sorted_pp

#x_positions = [5, 5.250485638786552, 4.7226962765210425, 5.141282164331763, 5.109737205385396, 4.6539156484155395, 5.423226235071773, 4.731605972566232, 4.93574506401063, 5.407812495241269, 4.433817214180296, 5.425298067403919, 4.970744756718158, 4.572861132832538, 5.6937484811463825, 4.398036712984448, 5.168269995548959, 5.397743784116363, 4.206089700451378, 5.786752835361285, 4.652543793641772, 4.6841125577705345, 5.855682405810947, 4.033029574391985, 5.5588671442805655, 5.180666067895162, 4.130315729520892, 6.129463939315329, 4.207739114568908, 5.005856307583388, 5.82865651440003, 3.7387388233932057, 6.035528959383138, 4.7613523377372795, 4.272108295492309, 6.350211171959499, 3.7247814203185046, 5.509841327412798, 5.565560544774452, 3.6143960131121284, 6.497127844502888, 4.1910005890160225, 4.657082082906295, 6.358742439234367, 3.3130499122826, 6.123497546431379, 5.06437788334463, 3.7365591792748956, 6.830941255451849, 3.5609828025830783, 5.262548110409825, 6.096428237484917, 3.083417126740668, 6.740127216002188, 4.372549825098482, 4.142362307357777, 6.933212912734145, 2.989067521999289, 6.017350920384885, 5.550366292068283, 3.1274023163278617, 7.2357643576169846, 3.5828421045026064, 4.818703160097719, 6.729419748692939, 2.600114321128371, 6.810221987488584, 4.7603764215201645, 3.4983402776546746, 7.4901816843999995, 2.821018253103248, 5.699446848372687, 6.190853579414215, 2.5041914534437186, 7.505669800832369, 3.817377886640652, 4.197788373449543, 7.40877202538355, 2.2269454246819538, 6.671516847653956, 5.344590426860564, 2.7755889734067876, 7.965188580602113, 2.852956612814865, 5.169685475989397, 6.9417639641495885, 1.9318663887619039, 7.589369090800789, 4.274850588379245, 3.436200117431058, 8.070633424049307, 2.021315450551011, 6.3036576099450805, 6.097501105490408, 2.0352942094845394, 8.296001408117043, 3.1150205763905605, 4.446210418342553, 7.746128243196701, 1.4760504671133114, 7.447493615265644, 4.947294905498945, 2.5852047242475042, 8.647542528058269, 2.0310329557727598, 5.704032011941634, 6.974929101921816, 1.3451189690100418, 8.427388348452624, 3.620550326342191, 3.5648688150181407, 8.537764788844965, 1.1981735729785448, 7.056085455743052, 5.80826744027691, 1.707812786416505, 9.07328180448268, 2.2902971411970077, 4.8888139096644, 7.918689839927688, 0.7745016160071545, 8.315551016604733, 4.364273398716655, 2.5774412424352335, 9.245703712696539, 1.1507328280817997, 6.409141300529855, 6.813850500308124, 0.8747523102550279, 9.287800071591061, 2.816486047094279, 3.8927591317749597, 8.860112600977102, 0.3896794090337101, 7.931924783469607, 5.321696526670858, 1.54872862105272, 9.799085452755234, 1.3729994784917783, 5.520024254955994, 7.904875937481938, 0.1597793034723125, 9.241888621669382, 3.6079710747427836]
#y_positions = [5, 4.908522921598882, 4.885533214665974, 5.301911346512257, 4.650139756190207, 5.2005632608140475, 5.0930447834365244, 4.618237739141675, 5.495854114837219, 4.656294583735528, 4.976587094316369, 5.423227543837227, 4.367342713744929, 5.51185626165882, 4.906656307620238, 4.5811707043875645, 5.747972583973324, 4.305881939295054, 5.2532802414620265, 5.363498400494541, 4.169774618152909, 5.878251806119883, 4.550275567897369, 4.74511140472855, 5.869163559303693, 3.9487447742393487, 5.673534906059977, 5.0935716529230035, 4.143592503228134, 6.199985709773866, 4.086523403554582, 5.116896059937403, 5.785926061585234, 3.68819777745488, 6.156698510540524, 4.629959743925398, 4.345582687821024, 6.375199233556021, 3.6107047577298674, 5.656667878483139, 5.46157627934999, 3.6195942795585143, 6.596929891984583, 4.03480739662945, 4.789763462856103, 6.319923371869411, 3.2345066980452244, 6.282075384884007, 4.906377191905412, 3.8110197857059216, 6.881772698739205, 3.4076360661508636, 5.441007786446884, 5.985878933809053, 3.065897954486243, 6.88031079858369, 4.179824510218719, 4.287776945028433, 6.912966687957861, 2.869953769385507, 6.2170274002188775, 5.373008733124691, 3.1884637736911254, 7.326279411482183, 3.384382952571382, 5.023424951373684, 6.626101923965405, 2.5450000030385005, 6.998754131524375, 4.534411172324166, 3.6436017087637715, 7.504151374478291, 2.651316922860644, 5.939175601284303, 6.005792647217448, 2.5357524377399536, 7.647810595694434, 3.572478606209481, 4.418668683033996, 7.3289072986675015, 2.120545635417006, 6.912182007345267, 5.093636491700278, 2.904718469144401, 8.028583489083529, 2.6263957465545102, 5.443346527663269, 6.764354128111268, 1.9174789362270612, 7.791868536890189, 3.987253822739541, 3.658899904561563, 8.031579924071321, 1.8525244346367922, 6.59529433651867, 5.834490693591293, 2.130395436589424, 8.422147699475499, 2.830027725541774, 4.742659497723088, 7.594395134582436, 1.4003858299793244, 7.714751349076844, 4.6259973924546225, 2.792006637171985, 8.666349233766363, 1.7925971846118136, 6.040117613210055, 6.716814944405959, 1.387766659121192, 8.62634781590136, 3.2808922634343585, 3.8683815734772957, 8.431109528808705, 1.0484836426042738, 7.387316721445883, 5.467306474671937, 1.8787895198434086, 9.165182920884387, 1.9798593379938594, 5.25743837706326, 7.685435886543517, 0.747253629897414, 8.592907853525336, 3.9793248500269067, 2.868535189313963, 9.203423038380205, 0.9182041362112336, 6.797868598717319, 6.471693465764796, 0.9891757378425972, 9.464752810596826, 2.4373239600847754, 4.27700496108893, 8.673393126807516, 0.2776112200315026, 8.287831653228379, 4.906304657783384, 1.8053203089996344, 9.83880349039945, 1.0539011938576053, 5.9539608936863235, 7.58343931593711, 0.19768228130965504]
#x_positions = [7, 25, 26, 45, 54, 93, 94, 96, 111, 120, 121, 151, 155, 165, 179, 183, 199, 206, 214, 230, 244, 244, 246, 252, 259, 262, 267, 278, 288, 300, 329, 329, 331, 331, 338, 342, 348, 352, 352, 355, 389, 398, 405, 407, 415, 426, 430, 441, 445, 452, 456, 460, 461, 467, 486, 486, 490, 499, 504, 513, 520, 530, 538, 547, 556, 561, 562, 563, 569, 582, 593, 598, 598, 602, 632, 644, 648, 652, 653, 661, 666, 669, 678, 681, 684, 686, 687, 708, 719, 721, 738, 740, 745, 747, 748, 748, 778, 783, 789, 802, 808, 814, 825, 843, 855, 859, 870, 871, 871, 879, 903, 905, 913, 933, 960, 964, 964, 980, 986]
#y_positions = [491, 594, 353, 419, 675, 495, 738, 268, 204, 550, 668, 362, 849, 250, 128, 492, 854, 613, 733, 480, 215, 305, 520, 923, 430, 72, 369, 638, 840, 134, 67, 308, 433, 786, 533, 694, 945, 230, 849, 610, 369, 733, 252, 10, 457, 973, 132, 863, 562, 643, 252, 323, 899, 797, 37, 401, 949, 235, 492, 749, 583, 683, 187, 84, 341, 7, 247, 866, 435, 727, 527, 613, 974, 125, 371, 767, 255, 472, 952, 39, 689, 296, 551, 198, 898, 853, 805, 363, 618, 145, 82, 682, 428, 788, 546, 914, 258, 727, 125, 505, 852, 367, 727, 612, 137, 486, 335, 404, 733, 801, 218, 516, 716, 226, 661, 318, 566, 407, 484]
#x_positions = [19, 20, 46, 49, 80, 80, 115, 122, 133, 136, 141, 144, 146, 150, 195, 199, 199, 225, 228, 239, 242, 253, 255, 259, 259, 318, 318, 318, 318, 335, 337, 348, 350, 359, 360, 369, 371, 378, 378, 432, 435, 438, 440, 443, 444, 446, 454, 456, 456, 482, 497, 497, 513, 542, 544, 544, 551, 554, 555, 557, 557, 563, 566, 614, 617, 617, 626, 639, 639, 647, 649, 661, 663, 676, 676, 676, 676, 736, 736, 742, 745, 756, 758, 770, 772, 792, 796, 796, 841, 850, 854, 856, 861, 864, 875, 877, 915, 915, 949, 951, 974, 976]
#y_positions = [620, 376, 451, 555, 321, 678, 559, 444, 777, 229, 644, 363, 158, 851, 262, 499, 738, 140, 865, 354, 650, 570, 436, 198, 795, 83, 320, 679, 919, 547, 457, 763, 243, 147, 858, 26, 980, 380, 619, 259, 745, 488, 127, 879, 955, 51, 340, 546, 664, 442, 201, 799, 563, 666, 339, 458, 53, 952, 882, 118, 520, 749, 256, 23, 380, 619, 980, 146, 859, 245, 760, 460, 545, 82, 321, 678, 918, 201, 799, 439, 566, 653, 354, 868, 137, 262, 500, 739, 858, 152, 364, 640, 232, 773, 448, 563, 322, 679, 558, 448, 639, 370]
x_positions = [376.0, 626.5, 450.5, 556.5, 679.0, 323.0, 443.0, 562.5, 230.0, 644.5, 777.0, 368.5, 153.5, 854.0, 502.0, 262.5, 750.0, 140.5, 866.0, 355.0, 652.0, 569.5, 437.5, 214.0, 799.0, 680.5, 323.0, 919.5, 83.5, 548.0, 459.0, 763.0, 244.0, 150.5, 858.5, 982.0, 27.5, 382.5, 621.0, 260.0, 747.0, 129.0, 491.0, 880.5, 956.0, 51.0, 341.5, 665.5, 551.5, 442.0, 203.0, 800.5, 562.0, 668.0, 339.5, 463.5, 53.5, 883.0, 126.5, 521.5, 749.5, 952.5, 258.0, 382.0, 621.0, 23.5, 980.5, 867.0, 140.5, 246.0, 761.0, 461.0, 546.0, 79.0, 322.5, 680.5, 928.5, 800.5, 441.5, 203.5, 566.5, 653.5, 353.0, 868.5, 139.0, 262.0, 502.0, 740.5, 853.5, 156.0, 370.0, 642.5, 233.0, 775.0, 445.5, 560.5, 323.0, 681.0, 449.0, 562.0, 373.0, 633.5]
y_positions = [22.5, 16.0, 49.0, 51.5, 72.5, 82.0, 123.5, 123.0, 139.0, 144.0, 142.0, 146.5, 152.0, 151.5, 201.0, 199.5, 209.0, 228.0, 230.5, 242.0, 244.0, 256.5, 258.0, 258.5, 261.0, 320.5, 321.0, 321.0, 322.5, 337.5, 339.5, 351.0, 353.0, 361.5, 364.0, 372.5, 376.5, 380.5, 380.0, 434.5, 439.0, 438.0, 440.0, 445.0, 446.5, 448.5, 456.5, 458.0, 462.5, 483.5, 500.0, 500.0, 518.5, 544.0, 546.0, 549.5, 554.5, 559.0, 561.5, 559.5, 565.5, 556.5, 568.0, 619.0, 619.0, 620.5, 628.5, 634.0, 635.0, 649.5, 652.0, 662.5, 665.5, 677.0, 678.5, 678.5, 678.0, 738.5, 745.0, 739.0, 747.0, 759.0, 761.0, 772.5, 774.0, 795.5, 798.0, 796.0, 849.5, 853.5, 856.5, 859.0, 863.5, 867.0, 878.0, 879.0, 917.5, 917.5, 954.0, 956.0, 978.0, 977.5]
print(len(x_positions))
pp = BandSort(x_positions,y_positions)
print(len(pp))
board = GetBoard()

v_diameter = mm_to_nm(0.3)

gndNet = pcbnew.NETINFO_ITEM(board, "GND")
voltNet = pcbnew.NETINFO_ITEM(board, "5V")
board.Add(gndNet)
board.Add(voltNet)

for i in range(len(pp)):
	led_footprint = pcbnew.FootprintLoad("D:/Program Files/KiCad/6.0/share/kicad/footprints/LED_SMD.pretty","LED_WS2812B_PLCC4_5.0x5.0mm_P3.2mm")
	board.Add(led_footprint)
	led_footprint.SetReference("led"+str(i))
	led_footprint.SetX(in_to_nm(pp[i][0]))
	led_footprint.SetY(in_to_nm(pp[i][1]))
	j = i+1
	inNet = pcbnew.NETINFO_ITEM(board, "LINK%02d" % i)
	outNet = pcbnew.NETINFO_ITEM(board, "LINK%02d" % j)
	board.Add(inNet)
	board.Add(outNet)
	find_pad(led_footprint, "1").SetNetCode(voltNet.GetNetCode())
	find_pad(led_footprint, "3").SetNetCode(gndNet.GetNetCode())
	find_pad(led_footprint, "2").SetNetCode(outNet.GetNetCode())
	find_pad(led_footprint, "4").SetNetCode(inNet.GetNetCode())

	v = pcbnew.PCB_VIA(board)
	v.SetX(in_to_nm(pp[i][0])+mm_to_nm(2.4))
	v.SetY(in_to_nm(pp[i][1])+mm_to_nm(1.6))
	v.SetDrill(v_diameter)
	v.SetWidth(v_diameter*2)
	#v.SetNetname(netName)
	#v.SetNetCode(net.GetNet())
	board.Add(v)
pcbnew.Refresh()